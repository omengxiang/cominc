// cstddef standard header
#pragma once
#ifndef _CSTDDEF_
#define _CSTDDEF_
#include <stddef.h>
#include <xtr1common>

 #ifndef RC_INVOKED
_STD_BEGIN
using _CSTD ptrdiff_t; using _CSTD size_t;
typedef double max_align_t;	// most aligned type

#if _HAS_STD_BYTE
	// ENUM CLASS byte
enum class byte : unsigned char { };

template<class _IntType,
	enable_if_t<is_integral<_IntType>::value, int> = 0>
	constexpr byte operator<<(const byte _Arg, const _IntType _Shift) _NOEXCEPT
	{	// bitwise LEFT SHIFT, every static_cast is intentional
	return (static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(_Arg) << _Shift)));
	}

template<class _IntType,
	enable_if_t<is_integral<_IntType>::value, int> = 0>
	constexpr byte operator>>(const byte _Arg, const _IntType _Shift) _NOEXCEPT
	{	// bitwise RIGHT SHIFT, every static_cast is intentional
	return (static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(_Arg) >> _Shift)));
	}

constexpr byte operator|(const byte _Left, const byte _Right) _NOEXCEPT
	{	// bitwise OR, every static_cast is intentional
	return (static_cast<byte>(static_cast<unsigned char>(
		static_cast<unsigned int>(_Left) | static_cast<unsigned int>(_Right))));
	}

constexpr byte operator&(const byte _Left, const byte _Right) _NOEXCEPT
	{	// bitwise AND, every static_cast is intentional
	return (static_cast<byte>(static_cast<unsigned char>(
		static_cast<unsigned int>(_Left) & static_cast<unsigned int>(_Right))));
	}

constexpr byte operator^(const byte _Left, const byte _Right) _NOEXCEPT
	{	// bitwise XOR, every static_cast is intentional
	return (static_cast<byte>(static_cast<unsigned char>(
		static_cast<unsigned int>(_Left) ^ static_cast<unsigned int>(_Right))));
	}

constexpr byte operator~(const byte _Arg) _NOEXCEPT
	{	// bitwise NOT, every static_cast is intentional
	return (static_cast<byte>(static_cast<unsigned char>(~static_cast<unsigned int>(_Arg))));
	}

template<class _IntType,
	enable_if_t<is_integral<_IntType>::value, int> = 0>
	constexpr byte& operator<<=(byte& _Arg, const _IntType _Shift) _NOEXCEPT
	{	// bitwise LEFT SHIFT
	return (_Arg = _Arg << _Shift);
	}

template<class _IntType,
	enable_if_t<is_integral<_IntType>::value, int> = 0>
	constexpr byte& operator>>=(byte& _Arg, const _IntType _Shift) _NOEXCEPT
	{	// bitwise RIGHT SHIFT
	return (_Arg = _Arg >> _Shift);
	}

constexpr byte& operator|=(byte& _Left, const byte _Right) _NOEXCEPT
	{	// bitwise OR
	return (_Left = _Left | _Right);
	}

constexpr byte& operator&=(byte& _Left, const byte _Right) _NOEXCEPT
	{	// bitwise AND
	return (_Left = _Left & _Right);
	}

constexpr byte& operator^=(byte& _Left, const byte _Right) _NOEXCEPT
	{	// bitwise XOR
	return (_Left = _Left ^ _Right);
	}

template<class _IntType,
	enable_if_t<is_integral<_IntType>::value, int> = 0>
	constexpr _IntType to_integer(const byte _Arg) _NOEXCEPT
	{	// convert byte to integer
	return (static_cast<_IntType>(_Arg));
	}
#endif /* _HAS_STD_BYTE */

_STD_END

using _STD max_align_t;	// intentional, for historical reasons
 #endif /* RC_INVOKED */
#endif /* _CSTDDEF_ */

/*
 * Copyright (c) by P.J. Plauger. All rights reserved.
 * Consult your license regarding permissions and restrictions.
V6.50:0009 */
